--The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

--1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

--Let us list the factors of the first seven triangle numbers:

-- 1: 1
-- 3: 1,3
-- 6: 1,2,3,6
--10: 1,2,5,10
--15: 1,3,5,15
--21: 1,3,7,21
--28: 1,2,4,7,14,28
--We can see that 28 is the first triangle number to have over five divisors.

--What is the value of the first triangle number to have over five hundred divisors?

--factors :: Integer -> [Integer]
--factors n = [i | i <-[1..n], (mod n i) == 0]

import Data.List

tuple_to_list :: ([a], [a]) -> [a]
tuple_to_list lt = (fst lt) ++ (snd lt)

factors :: Integral a => a -> [a]
factors n = sort (tuple_to_list(unzip[(j, (div n j)) | j <- [i | i <- [1..truncate (sqrt (fromIntegral n))], (mod n i) == 0]]))

triangle_numbers :: Int -> [Int]
triangle_numbers 1 = [1]
triangle_numbers n = triangle_numbers (n - 1) ++ [(triangle_numbers (n - 1) !! (n - 2)) + n]

triangleNumbers = scanl1 (+) [1..]
nDivisors n = length (factors n) 

factors_of_triangle_number :: Int -> [Int]
factors_of_triangle_number n = factors (last (triangle_numbers n))

factors_of_all_tns = (map factors_of_triangle_number [1..])

triangle_numbers_with_500_factors = takeWhile (\xs -> (length xs <= 1000)) factors_of_all_tns

main = print (last triangle_numbers_with_500_factors)

problem_12 = head $ filter ((> 500) . nDivisors) triangle_numbers
